// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace test.Migrations
{
    [DbContext(typeof(ServiceDbContext))]
    partial class ServiceDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("ElectricityConsumedDayEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<double>("AllElectricyConsumed")
                        .HasColumnType("double");

                    b.Property<int>("Day")
                        .HasColumnType("int")
                        .HasAnnotation("Relational:JsonPropertyName", "periodDate");

                    b.Property<string>("ElectricyConsumedHours")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<Guid>("MounthId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("MounthId");

                    b.ToTable("ElectricityConsumedDayEntities");
                });

            modelBuilder.Entity("ElectricityConsumedMounthEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<double>("AllElectricyConsumed")
                        .HasColumnType("double");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<decimal>("Period")
                        .HasColumnType("decimal(65,30)");

                    b.Property<string>("PeriodDate")
                        .IsRequired()
                        .HasMaxLength(7)
                        .HasColumnType("varchar(7)");

                    b.HasKey("Id");

                    b.ToTable("ElectricityConsumedMounthEntities");

                    b.HasData(
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-100000000000"),
                            AllElectricyConsumed = 800.5,
                            Name = "Client 1",
                            Period = 544m,
                            PeriodDate = "12-2024"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-200000000000"),
                            AllElectricyConsumed = 1212.5,
                            Name = "Client 2",
                            Period = 744m,
                            PeriodDate = "11-2024"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-300000000000"),
                            AllElectricyConsumed = 730.5,
                            Name = "Client 3",
                            Period = 744m,
                            PeriodDate = "10-2024"
                        });
                });

            modelBuilder.Entity("PermissionEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("PermissionEntity");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "ADD_ACCOUNTANT"
                        },
                        new
                        {
                            Id = 2,
                            Name = "WATCH_DATA"
                        },
                        new
                        {
                            Id = 3,
                            Name = "SEND_NOTIFICATION"
                        },
                        new
                        {
                            Id = 4,
                            Name = "WATCH_SESSIONS"
                        });
                });

            modelBuilder.Entity("RefreshSessionEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("ExpiresIn")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("FingerPrint")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Ip")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<Guid>("RefreshToken")
                        .HasColumnType("char(36)");

                    b.Property<string>("UserAgent")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.ToTable("RefreshSessions");
                });

            modelBuilder.Entity("RoleEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Admin"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Accountant"
                        });
                });

            modelBuilder.Entity("RolePermissionEntity", b =>
                {
                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<int>("PermissionId")
                        .HasColumnType("int");

                    b.HasKey("RoleId", "PermissionId");

                    b.HasIndex("PermissionId");

                    b.ToTable("RolePermissionEntity");

                    b.HasData(
                        new
                        {
                            RoleId = 1,
                            PermissionId = 1
                        },
                        new
                        {
                            RoleId = 1,
                            PermissionId = 4
                        },
                        new
                        {
                            RoleId = 2,
                            PermissionId = 2
                        },
                        new
                        {
                            RoleId = 2,
                            PermissionId = 3
                        });
                });

            modelBuilder.Entity("UserEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000001"),
                            Email = "admin",
                            PasswordHash = "$2a$11$XPQnQSVdM/gLV3rmmzwWyeEImsNvJKDFp.NXjxwN6ZBEpMl1zfBqS",
                            UserName = "admin"
                        });
                });

            modelBuilder.Entity("UserRoleEntity", b =>
                {
                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)");

                    b.HasKey("RoleId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("UserRoleEntity");

                    b.HasData(
                        new
                        {
                            RoleId = 1,
                            UserId = new Guid("00000000-0000-0000-0000-000000000001")
                        });
                });

            modelBuilder.Entity("ElectricityConsumedDayEntity", b =>
                {
                    b.HasOne("ElectricityConsumedMounthEntity", "ElectricyConsumedMounth")
                        .WithMany("ElectricyConsumedDays")
                        .HasForeignKey("MounthId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ElectricyConsumedMounth");
                });

            modelBuilder.Entity("RolePermissionEntity", b =>
                {
                    b.HasOne("PermissionEntity", null)
                        .WithMany()
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RoleEntity", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("UserRoleEntity", b =>
                {
                    b.HasOne("RoleEntity", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("UserEntity", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ElectricityConsumedMounthEntity", b =>
                {
                    b.Navigation("ElectricyConsumedDays");
                });
#pragma warning restore 612, 618
        }
    }
}
